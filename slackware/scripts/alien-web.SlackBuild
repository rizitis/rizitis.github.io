#!/bin/bash
# Generated by Alien's SlackBuild Toolkit: http://slackware.com/~alien/AST
# Copyright 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2022  Eric Hameleers, Eindhoven, Netherlands
#
# Modified by
# Copyright 2023  me@gmail.com
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script
# ===========================
# By:          me@gmail.com
# For:         foo
# Descr:       foo
# URL:         https://github.com/
# Build needs:
# Needs:
# Changelog:
# git-1:     26/Nov/2023 by me@gmail.com
#              * Initial build.
#
# Run 'sh foo.SlackBuild' to build a Slackware package.
# The package (.t?z) and .txt file as well as build logs are created in /tmp .
# Install the package using 'installpkg' or 'upgradepkg --install-new'.
#
# -----------------------------------------------------------------------------

PRGNAM=foo
VERSION=${VERSION:-git}
BUILD=${BUILD:-1}
# 'make' can run jobs in parallel for added speed. The number should be higher
# than the number of cores/virtual CPU's in your system:
NUMJOBS=${NUMJOBS:-" -j$(nproc) "}
# The TAG is a unique identifier for all your Slackware packages.
# Use your initials as the value for TAG for instance.
TAG=${TAG:-_tag}

# This covers most filenames you'd want as documentation. Change if needed.
DOCS="ABOUT* AUTHORS BUGS ChangeLog* COPYING CREDITS FAQ GPL* HACKING \
      LICENSE MAINTAINERS NEWS README* TODO"

# Where do we look for sources?
SRCDIR=$(cd $(dirname "$0"); pwd)

# Place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

# Kernel module related parameters:
KVER=${KVER:-$(uname -r)}
KSRC=${KSRC:-/lib/modules/${KVER}/build}

# Input URL: https://github.com/
SOURCE[0]="$SRCDIR/${PRGNAM}-${VERSION}.tar.gz"
SRCURL[0]="https://github.com/"


##
## --- with a little luck, you won't have to edit below this point --- ##
##

# You can use your own private machine.conf file to overrule machine defaults:
if [ -e "$SRCDIR"/machine.conf ]; then
  . "$SRCDIR"/machine.conf
elif [ -e /etc/slackbuild/machine.conf ]; then
  . /etc/slackbuild/machine.conf
else
  # Automatically determine the architecture we're building on:
  if [ -z "$ARCH" ]; then
    case "$(uname -m)" in
      i?86) ARCH=i586 ;;
      arm*) readelf /usr/bin/file -A | egrep -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
      # Unless $ARCH is already set, use uname -m for all other archs:
      *) ARCH=$(uname -m) ;;
    esac
    export ARCH
  fi
  # Set CFLAGS/CXXFLAGS and LIBDIRSUFFIX:
  case "$ARCH" in
    i?86)      SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
               SLKLDFLAGS=""; LIBDIRSUFFIX=""
               ;;
    x86_64)    SLKCFLAGS="-O2 -fPIC"
               SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
               ;;
    armv7hl)   SLKCFLAGS="-O2 -march=armv7-a -mfpu=vfpv3-d16"
               SLKLDFLAGS=""; LIBDIRSUFFIX=""
               ;;
    *)         SLKCFLAGS=${SLKCFLAGS:-"-O2"}
               SLKLDFLAGS=${SLKLDFLAGS:-""}; LIBDIRSUFFIX=${LIBDIRSUFFIX:-""}
               ;;
  esac
fi

case "$ARCH" in
    arm*)    TARGET=$ARCH-slackware-linux-gnueabi ;;
    *)       TARGET=$ARCH-slackware-linux ;;
esac

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line ${LINENO}" | tee $OUTPUT/error-${PRGNAM}.log' ERR
# Catch unitialized variables:
set -u
P1=${1:-1}

# Save old umask and set to 0022:
_UMASK_=$(umask)
umask 0022

# Create working directories:
mkdir -p "$OUTPUT"          # place for the package to be saved
mkdir -p "$TMP"/tmp-$PRGNAM # location to build the source
mkdir -p "$PKG"             # place for the package to be built
rm -rf "$PKG"/*             # always erase old package's contents
rm -rf "$TMP"/tmp-$PRGNAM/* # remove the remnants of previous build
rm -rf "$OUTPUT"/{checkout,configure,make,install,error,makepkg,patch}-$PRGNAM.log
                          # remove old log files

# Source file availability:
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if ! [ -f "${SOURCE[$i]}" ]; then
    echo "Source '$(basename "${SOURCE[$i]}")' not available yet..."
    # Check if the $SRCDIR is writable at all - if not, download to $OUTPUT
    [ -w "$SRCDIR" ] || SOURCE[$i]="$OUTPUT/$(basename "${SOURCE[$i]}")"
    if [ -f "${SOURCE[$i]}" ]; then echo "Ah, found it!"; continue; fi
    if ! [ "${SRCURL[$i]}" == "" ]; then
      echo "Will download file to $(dirname "$SOURCE"[$i])"
      wget --no-check-certificate -nv -T 20 -O "${SOURCE[$i]}" "${SRCURL[$i]}" || true
      if [ $? -ne 0 -o ! -s "${SOURCE[$i]}" ]; then
        echo "Fail to download '$(basename "${SOURCE[$i]}")'. Aborting the build."
        mv -f "${SOURCE[$i]}" "${SOURCE[$i]}".FAIL
        exit 1
      fi
    else
      echo "File '$(basename "${SOURCE[$i]}")' not available. Aborting the build."
      exit 1
    fi
  fi
done

if [ "$P1" == "--download" ]; then
  echo "Download complete."
  exit 0
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PRGNAM-$VERSION"
echo "++"

# Explode the package framework:
if [ -f "$SRCDIR"/_$PRGNAM.tar.gz ]; then
  cd "$PKG"
  explodepkg "$SRCDIR"/_$PRGNAM.tar.gz
  cd -
fi

cd "$TMP"/tmp-$PRGNAM
echo "Extracting the source archive(s) for $PRGNAM..."
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if $(file "${SOURCE[$i]}" | grep -qi ": 7-zip"); then
    7za x "${SOURCE[$i]}"
  elif $(file "${SOURCE[$i]}" | grep -qi ": zip"); then
    unzip "${SOURCE[$i]}"
  else
    tar -xvf "${SOURCE[$i]}"
  fi
done
cd ${PRGNAM}-"${VERSION}"
chown -R root:root .
chmod -R u+w,go+r-w,a+rX-st .

echo Building ...
mkdir -p build-${PRGNAM}
cd build-${PRGNAM}
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DMAN_INSTALL_DIR=/usr/man \
    -DSYSCONF_INSTALL_DIR=/etc \
    -DLIB_SUFFIX="${LIBDIRSUFFIX}" \
    ..
  make "$NUMJOBS" 2>&1 | tee "$OUTPUT"/make-${PRGNAM}.log
  make DESTDIR="$PKG" install 2>&1 | tee "$OUTPUT"/install-${PRGNAM}.log
cd -

# Add this to the doinst.sh:
mkdir -p "$PKG"/install
cat <<EOINS >> "$PKG"/install/doinst.sh
# Handle the incoming configuration files:
config() {
  for infile in \$1; do
    NEW="\$infile"
    OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
    # If there's no config file by that name, mv it over:
    if [ ! -r \$OLD ]; then
      mv \$NEW \$OLD
    elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
      # toss the redundant copy
      rm \$NEW
    fi
    # Otherwise, we leave the .new copy for the admin to consider...
  done
}

preserve_perms() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  if [ -e \$OLD ]; then
    cp -a \$OLD \${NEW}.incoming
    cat \$NEW > \${NEW}.incoming
    mv \${NEW}.incoming \$NEW
  fi
  config \$NEW
}

# Examples of how to handle your '.new' config files:
#preserve_perms etc/rc.d/rc.foo.new
#config etc/foo.conf.new

# Update the desktop database:
if [ -x usr/bin/update-desktop-database ]; then
  chroot . /usr/bin/update-desktop-database usr/share/applications > /dev/null 2>&1
fi

# Update hicolor theme cache:
if [ -d usr/share/icons/hicolor ]; then
  if [ -x /usr/bin/gtk-update-icon-cache ]; then
    chroot . /usr/bin/gtk-update-icon-cache -f -t usr/share/icons/hicolor 1> /dev/null 2> /dev/null
  fi
fi

# Update the mime database:
if [ -x usr/bin/update-mime-database ]; then
  chroot . /usr/bin/update-mime-database usr/share/mime >/dev/null 2>&1
fi

# Only run depmod on matching running kernel
# Slackware will run depmod anyway on reboot):
MYMODVER=$KVER
MYKERNEL=\$(uname -r)
if [ "\$MYKERNEL" = "\$MYMODVER" ]; then
  if [ -x sbin/depmod ]; then
    chroot . /sbin/depmod -a \$MYKERNEL 1> /dev/null 2> /dev/null
  fi
fi

# Determine the rc.modules to use:
if [ -f etc/rc.d/rc.modules.local ]; then
  RCMODULES="etc/rc.d/rc.modules.local"
elif [ -f etc/rc.d/rc.modules-$KVER) ]; then
  RCMODULES="etc/rc.d/rc.modules-$KVER"
else
  RCMODULES="etc/rc.d/rc.modules"
fi

# Make sure the module gets loaded on boot:
if ! grep -q "$PRGNAM" \${RCMODULES} ; then
  echo "" >> \${RCMODULES}
  echo "# Load the kernel module" >> \${RCMODULES}
  echo "#/sbin/modprobe $PRGNAM" >> \${RCMODULES}
  echo "##"
  echo "## Edit \${RCMODULES} if the module needs manual loading."
  echo "##"
fi

EOINS

# Add documentation:
mkdir -p "$PKG"/usr/doc/$PRGNAM-"$VERSION"
cp -a "$DOCS" "$PKG"/usr/doc/$PRGNAM-"$VERSION" || true
cat "$SRCDIR"/$(basename "$0") > "$PKG"/usr/doc/$PRGNAM-"$VERSION"/$PRGNAM.SlackBuild
chown -R root:root "$PKG"/usr/doc/$PRGNAM-"$VERSION"
find "$PKG"/usr/doc -type f -exec chmod 644 {} \;

# Compress the man page(s):
if [ -d "$PKG"/usr/man ]; then
  find "$PKG"/usr/man -type f -name "*.?" -exec gzip -9f {} \;
  for i in $(find "$PKG"/usr/man -type l -name "*.?") ; do ln -s $( readlink "$i" ).gz "$i".gz ; rm "$i" ; done
fi

# Compress info pages and remove the package's dir file:
if [ -d "$PKG"/usr/info ]; then
  rm -f "$PKG"/usr/info/dir
  gzip -9f "$PKG"/usr/info/*.info*
  # If any info files are present, consider adding this to a doinst.sh
  # (replacing XXXXX with whatever files you find):
  # chroot . install-info /usr/info/XXXXX.info.gz /usr/info/dir 2> /dev/null
fi

# Strip binaries (if any):
find "$PKG" | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

# Add a package description:
mkdir -p "$PKG"/install
cat "$SRCDIR"/slack-desc > "$PKG"/install/slack-desc
if [ -f "$SRCDIR"/doinst.sh ]; then
  cat "$SRCDIR"/doinst.sh >> "$PKG"/install/doinst.sh
elif [ -f "$SRCDIR"/doinst.sh.gz ]; then
  zcat "$SRCDIR"/doinst.sh.gz >> "$PKG"/install/doinst.sh
fi
if [ -f "$SRCDIR"/slack-required ]; then
  cat "$SRCDIR"/slack-required > "$PKG"/install/slack-required
fi

# Build the package:
cd "$PKG"
makepkg --linkadd y --chown n "$OUTPUT"/${PRGNAM}-"${VERSION}"_$(echo "$KVER" | tr - _)-"${ARCH}"-"${BUILD}""${TAG}"."${PKGTYPE:-tgz}" 2>&1 | tee "$OUTPUT"/makepkg-${PRGNAM}.log
cd "$OUTPUT"
md5sum ${PRGNAM}-"${VERSION}"_$(echo "$KVER" | tr - _)-"${ARCH}"-"${BUILD}""${TAG}"."${PKGTYPE:-tgz}" > ${PRGNAM}-"${VERSION}"_$(echo "$KVER" | tr - _)-"${ARCH}"-"${BUILD}""${TAG}"."${PKGTYPE:-tgz}".md5
cd -
cat "$PKG"/install/slack-desc | grep "^${PRGNAM}" > "$OUTPUT"/${PRGNAM}-"${VERSION}"_$(echo "$KVER" | tr - _)-"${ARCH}"-"${BUILD}""${TAG}".txt
if [ -f "$PKG"/install/slack-required ]; then
  cat "$PKG"/install/slack-required > "$OUTPUT"/${PRGNAM}-"${VERSION}"_$(echo "$KVER" | tr - _)-"${ARCH}"-"${BUILD}""${TAG}".dep
fi

# Restore the original umask:
umask "${_UMASK_}"
